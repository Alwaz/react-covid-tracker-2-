{"version":3,"sources":["util.js","Map.js","Infobox.js","LineGraph.js","Table.js","App.js","reportWebVitals.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","showData","data","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","color","fillColor","radius","Math","sqrt","Popup","className","style","backgroundImage","flag","Map","countries","zoom","TileLayer","attribution","url","Infobox","isRed","title","active","total","props","Card","onClick","CardContent","Typography","classname","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","Table","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setZoomCenter","mapCountries","setMapCountries","setCaseType","res","name","iso2","getCountriesData","onChangeCountry","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5217da5f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\nimport \"./map.css\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n// Draw ciscles on map\r\nexport const showData = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info__container\">\r\n          <div\r\n            className=\"info__flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info__name\">{country.country}</div>\r\n          <div className=\"info__cases\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info__recoverd\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info__deaths\">\r\n            Deaths:{numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as Leaflet, TileLayer } from \"react-leaflet\";\r\nimport \"./map.css\";\r\nimport { showData } from \"./util\";\r\n\r\nconst Map = ({ countries, center, zoom, casesType }) => {\r\n  return (\r\n    <div className=\"map\">\r\n      <Leaflet center={center} zoom={zoom}>\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"/>\r\n        {showData(countries, casesType)}\r\n      </Leaflet>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./infoBox.css\";\r\nimport { CardContent, Card, Typography } from \"@material-ui/core\";\r\n\r\nconst Infobox = ({ isRed, title, cases, active, total, ...props }) => {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && `infoBox--selected`} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        {/* Tile */}\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n\r\n        {/* cases */}\r\n        <h2 className=\"infoBox__cases\">{cases}</h2>\r\n\r\n        {/* totle case */}\r\n        <Typography classname=\"infoBox__total\" color=\"textSecondary\">{total} Total</Typography>\r\n        \r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Infobox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=300\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className='table'>\r\n            {countries.map(({country,cases})=>{\r\n                return(\r\n                    <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format('0,0')}</strong></td>\r\n                </tr>)\r\n               \r\n            })}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import \"./App.css\";\nimport Map from \"./Map\";\nimport Infobox from \"./Infobox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { Card, CardContent } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { FormControl, Select, MenuItem } from \"@material-ui/core\";\nimport \"leaflet/dist/leaflet.css\";\nimport { prettyPrintStat } from \"./util\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setZoomCenter] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCaseType] = useState(\"cases\");\n\n  // fetching  worldwide data here\n  useEffect(() => {\n    fetch(`https://disease.sh/v3/covid-19/all`)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  //fetching countries data\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((res) => res.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, //country name\n            value: country.countryInfo.iso2, // UK,USA\n          }));\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(data);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onChangeCountry = async (e) => {\n    const countryCode = e.target.value;\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? `https://disease.sh/v3/covid-19/all`\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        // this will diaplay whatever country is selected.\n        setCountry(countryCode);\n        // this will store the whole data\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setZoomCenter(3);\n      });\n    console.log(\"worlwide info\", countryInfo);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        {/* header */}\n        {/* Title + select input dropdown field */}\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            {/*bem naming convention*/}\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onChangeCountry}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => {\n                return (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/* Rendering Info Boxes here */}\n\n        <div className=\"app__stats\">\n          <Infobox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCaseType(\"cases\")}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={countryInfo.cases}\n            title=\"Coronavirus Cases\"\n          />\n          <Infobox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCaseType(\"recovered\")}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={countryInfo.recovered}\n            title=\"Recovered\"\n          />\n          <Infobox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCaseType(\"deaths\")}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={countryInfo.deaths}\n            title=\"Death\"\n          />\n        </div>\n\n        {/* Map */}\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>{\" \"}\n      {/*end of app left*/}\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by Country</h3>\n        </CardContent>\n\n        {/* Table */}\n        <CardContent>\n          <Table countries={tableData}></Table>\n\n          <h3>World Wide {casesType}</h3>\n\n          {/* Graph */}\n          <LineGraph className=\"app_graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}